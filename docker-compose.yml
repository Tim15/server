version: '2.2'
services:
  # HAProxy for multiple apps, etc
  # big TODO
  limits:
    image: alpine
    mem_limit: 10m
  proxy:
    image: proxy:latest
    restart: always
    # init: true # Properly forward stop signals to the child proccesses (syslogd and haproxy)
    init: true
    build: ./proxy
    volumes:
      - ./haproxy:/usr/local/etc/haproxy #haproxy.cfg
    ports:
      - "80:80"
      - "443:443"
      - "25:25"
    depends_on:
      - blog
      - web
      - portainer
      - company
      # - jupyter
    networks:
      - frontend
      - infra
      # - hidden
  blog:
    mem_limit: 100m
    restart: always
    image: ghost:alpine
    ports:
      - "2368"
    volumes:
      - ghost-data:/var/lib/ghost/content
    networks:
      - frontend
  web:
    extends: limits
    image: nginx:alpine
    restart: always
    volumes:
      - "html:/usr/share/nginx/html"
      - "./wiz:/usr/share/nginx/html"
    ports:
      - "80"
    networks:
      - frontend
  company:
    extends: limits
    image: nginx:alpine
    restart: always
    volumes:
      - "./company:/usr/share/nginx/html"
    ports:
      - "80"
    networks:
      - frontend
  poule:
    extends: limits
    image: icecrime/poule
    command: serve
    working_dir: /gitbot
    volumes:
      - "./gitbot:/gitbot"
    ports:
      - "80"
    networks:
      - frontend
  # mail:
  #   extends: limits
  #   image: zixia/simple-mail-forwarder
  #   environment:
  #     SMF_CONFIG: "@smartly.ml:timhigins@gmail.com,@wizproject.ml:timhigins@gmail.com"
  #   ports:
  #     - "25"
  #   networks:
  #     - frontend
  mail:
    image: tvial/docker-mailserver:latest
    hostname: mail
    domainname: domain.com
    container_name: mail
    ports:
    - "25:25"
    - "143:143"
    - "587:587"
    - "993:993"
    volumes:
    - maildata:/var/mail
    - mailstate:/var/mail-state
    - ./mail/:/tmp/docker-mailserver/
    environment:
    - ENABLE_SPAMASSASSIN=1
    - ENABLE_CLAMAV=1
    - ENABLE_FAIL2BAN=1
    - ENABLE_POSTGREY=1
    - ONE_DIR=1
    - DMS_DEBUG=0
    cap_add:
    - NET_ADMIN
  # gitbot:
  #   image: icecrime/poule
  #   volumes:
  #     -
  #   working_dir: /gitbot

  certbot:
    extends: limits
    # Placeholder for HAProxy
    image: certbot/certbot
    volumes:
      - "./certbot/cron:/var/spool/cron/crontabs"
      - "../letsencrypt:/etc/letsencrypt"
    entrypoint: /bin/busybox crond -f
    ports:
      - "80"
    networks:
      - infra
    # image: cert-manager:latest
    # build: ./cert-manager

  portainer:
    extends: limits
    image: portainer/portainer
    ports:
      - "9000"
    # deploy:
    #   placement:
    #     constraints:
    #       - "node.role == manager"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - infra
  drone-server:
    image: drone/drone:0.7
    ports:
      - 8000
    volumes:
      - /var/lib/drone:/var/lib/drone/
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=http://ci.wizproject.ml
      - DRONE_ADMIN=Tim15
      - DRONE_GITHUB=true
      - DRONE_GITHUB_CLIENT=60d37c011b7ef544d016
      - DRONE_GITHUB_SECRET=5f5df0335dba3e02e147e3fae9ab8b44a483fa8c
      - DRONE_SECRET=1609415d1b01df205864e25a1b807d5c3fb1add9ba42ad32
    networks:
      - frontend
      - infra

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
      - DRONE_SECRET=1609415d1b01df205864e25a1b807d5c3fb1add9ba42ad32
    networks:
      - infra
  # sandbox:
  #   image: node:8 # npm install /app/lagertha && npm install --prefix /app/lagertha/node_modules --save-dev nodemon &&
  #   command: "bash -c 'node /app/lagertha/node_modules/nodemon/bin/nodemon.js -L /app/lagertha/app.js'"
  #   volumes:
  #     - "./dev/:/app"
  #   ports:
  #     - 80
  #   networks:
  #     - frontend
  #     - sandbox
  # database:
  #   image: mongo
  #   ports:
  #     - 27017
  #   networks:
  #     - sandbox
  # jupyter:
  #   image: tensorflow/tensorflow
  #   ports:
  #     - "8888"
  #   volumes:
  #     - "notebooks:/notebooks"
  #   networks:
  #     - hidden
networks:
  frontend:
  infra:
  sandbox:
  # hidden:
volumes:
  ghost-data:
  html:
  notebooks:
  maildata:
  mailstate:
