version: '3.7'
services:
  limits: &limits
    init: true
    deploy:
      resources:
        limits:
          memory: 10m
          cpus: '0.25'
    image: alpine
    # mem_limit: 10m
  proxy:
    image: proxy:latest
    restart: always
    # init: true # Properly forward stop signals to the child proccesses (syslogd and haproxy)
    init: true
    build: ./proxy
    volumes:
      - ./haproxy:/usr/local/etc/haproxy #haproxy.cfg
    ports:
      - "80:80"
      - "443:443"
      - "25:25"
    depends_on:
      - blog
      - web
      - portainer
      - company
      # - jupyter
    networks:
      - frontend
      - infra
      # - hidden
  # timhigins.ml blog
  blog:
    restart: always
    image: ghost:alpine
    ports:
      - "2368"
    volumes:
      - ghost-data:/var/lib/ghost/content
      - ${PWD}/blog/config.production.json:/var/lib/ghost/config.production.json
    networks:
      - frontend
  # Wiz Project website
  web:
    <<: *limits
    image: nginx:alpine
    restart: always
    volumes:
      - "html:/usr/share/nginx/html"
      - "./wiz:/usr/share/nginx/html"
    ports:
      - "80"
    networks:
      - frontend
  # Smartly ML website
  company:
    <<: *limits
    image: nginx:alpine
    restart: always
    volumes:
      - "./company:/usr/share/nginx/html"
    ports:
      - "80"
    networks:
      - frontend
  # Zeta Records website
  zeta:
    <<: *limits
    image: nginx:alpine
    restart: always
    volumes:
      - "./zeta:/usr/share/nginx/html"
    ports:
      - "80"
    networks:
      - frontend
  # Github automation bot
  poule:
    <<: *limits
    image: icecrime/poule
    command: serve
    working_dir: /gitbot
    volumes:
      - "./gitbot:/gitbot"
    ports:
      - "80"
    networks:
      - frontend
  # LetsEncrypt SSL certificate renewal
  certbot:
    image: certbot/certbot
    restart: always
    init: true
    volumes:
      - "./certbot/cron:/var/spool/cron/crontabs"
      - "../letsencrypt:/etc/letsencrypt"
    entrypoint: /bin/busybox crond -f
    ports:
      - "80"
    networks:
      - infra
  # Docker UI
  portainer:
    <<: *limits
    image: portainer/portainer
    restart: always
    ports:
      - "9000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - infra

  # Drone CI
  drone-server:
    image: drone/drone:0.7
    restart: always
    ports:
      - 8000
    volumes:
      - /var/lib/drone:/var/lib/drone/
    restart: always
    env_file:
      - drone/drone.env
    networks:
      - frontend
      - infra
  drone-agent:
    image: drone/drone:0.7
    restart: always
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./drone/agent.env
    networks:
      - infra
  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn
    container_name: openvpn
    ports:
     - "1194:1194/udp"
    restart: always
    volumes:
     - ./openvpn-data/conf:/etc/openvpn
  # jupyter:
  #   image: tensorflow/tensorflow
  #   ports:
  #     - "8888"
  #   volumes:
  #     - "notebooks:/notebooks"
  #   networks:
  #     - hidden
networks:
  frontend:
  infra:
volumes:
  ghost-data:
  # ghost-config:
  html:
  notebooks:
  maildata:
  mailstate:
